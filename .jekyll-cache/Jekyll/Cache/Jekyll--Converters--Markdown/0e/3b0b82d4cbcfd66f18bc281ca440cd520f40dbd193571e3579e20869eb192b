I"
2<blockquote>
  <p>Spring MVC 에 대해서 알아보자
MVC는 Model, View, Controller로 구성되어 있다.</p>
</blockquote>

<ul>
  <li>Model : 데이터를 담을 도메인 객체, DTO</li>
  <li>View: 화면에 보여주는 부분, jsp, thymeleaf, React …</li>
  <li>Controller: 사용자의 입력을 받아서 모델 데이터를 검증/변경 하고, View단으로 전달하는 역할을 한다.</li>
</ul>

<h3 id="예제코드">예제코드</h3>

<p>Boot 기반의 프로젝트를 만든다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		<span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-thymeleaf<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>

	    <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>

        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.projectlombok<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>lombok<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">web</code>, <code class="language-plaintext highlighter-rouge">thymeleaf</code> , <code class="language-plaintext highlighter-rouge">lombok</code> 를 추가한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Event 도메인 클래스</span>
<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@Builder</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Event</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">limitOfEnrollment</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">startDateTime</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">endDateTime</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EventService</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Event</span><span class="o">&gt;</span> <span class="nf">getEvents</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Event</span> <span class="n">event1</span> <span class="o">=</span> <span class="nc">Event</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">"effective java"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">limitOfEnrollment</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
                <span class="o">.</span><span class="na">startDateTime</span><span class="o">(</span><span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2019</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">17</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">0</span><span class="o">))</span>
                <span class="o">.</span><span class="na">endDateTime</span><span class="o">(</span><span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2019</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">17</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">0</span><span class="o">))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>

        <span class="nc">Event</span> <span class="n">event2</span> <span class="o">=</span> <span class="nc">Event</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">"spring boot"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">limitOfEnrollment</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
                <span class="o">.</span><span class="na">startDateTime</span><span class="o">(</span><span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2019</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">17</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">0</span><span class="o">))</span>
                <span class="o">.</span><span class="na">endDateTime</span><span class="o">(</span><span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2019</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">17</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">0</span><span class="o">))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Event</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">event1</span><span class="o">);</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">event2</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>EventService에는 2개의 이벤트를 미리 넣어놓고(사실은 데이터베이서에 접근해서 데이터를 가지고 와야함), 이벤트의 리스트를 가지고 오는 코드를 작성한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EventController</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">EventService</span> <span class="n">eventService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/events"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">events</span><span class="o">(</span><span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"events"</span><span class="o">,</span> <span class="n">eventService</span><span class="o">.</span><span class="na">getEvents</span><span class="o">());</span>
        <span class="k">return</span> <span class="s">"events"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">/events</code> 라는 경로로 요청이 들어왔을 때, 모델에 eventService에서 가지고 온 이벤트 목록을 <code class="language-plaintext highlighter-rouge">events</code> 모델에 담는다. <code class="language-plaintext highlighter-rouge">return "events";</code> 이 부분은 events 라는 뷰(여기서는 thymeleaf)로 전달하겠다는 의미.</p>

<p><code class="language-plaintext highlighter-rouge">src/main/resources/templates</code> 하위에 <code class="language-plaintext highlighter-rouge">events.html</code> (컨트롤러에서 return하는 view name과 동일하게) 파일을 만든다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span> <span class="na">xmlns:th=</span><span class="s">"http://www.thymeleaf.org"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Title<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">xmlns:th="http://www.thymeleaf.org"</code> 타임리프를 사용할 xml name space를 지정해준다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span> <span class="na">xmlns:th=</span><span class="s">"http://www.thymeleaf.org"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Title<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;table&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;th&gt;</span>이름<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;th&gt;</span>참가인원<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;th&gt;</span>시작<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;th&gt;</span>종료<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
      <span class="nt">&lt;tr</span> <span class="na">th:each=</span><span class="s">"event: ${events}"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;td</span> <span class="na">th:text=</span><span class="s">"${event.name}"</span><span class="nt">&gt;&lt;/td&gt;</span>
        <span class="nt">&lt;td</span> <span class="na">th:text=</span><span class="s">"${event.limitOfEnrollment}"</span><span class="nt">&gt;&lt;/td&gt;</span>
        <span class="nt">&lt;td</span> <span class="na">th:text=</span><span class="s">"${event.startDateTime}"</span><span class="nt">&gt;&lt;/td&gt;</span>
        <span class="nt">&lt;td</span> <span class="na">th:text=</span><span class="s">"${event.endDateTime}"</span><span class="nt">&gt;&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/table&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>타임리프의 each구문을 사용해서 events 모델로 전달받은 객체를 event로 명명하고, event.name 이런식으로 접근해서 사용한다.</p>

<p>애플리케이션을 띄우고 <code class="language-plaintext highlighter-rouge">localhost:8080/events</code> 로 요청하면 원하는 데이터가 화면에 잘 보여진다.</p>
:ET