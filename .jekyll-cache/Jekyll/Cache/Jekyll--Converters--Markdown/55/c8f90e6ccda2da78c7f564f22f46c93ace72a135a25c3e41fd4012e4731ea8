I"xV<h2 id="학습-목표">학습 목표</h2>
<ul>
  <li>Java에서 제공하는 기본정렬은 어떤게 있나?</li>
  <li>Java에서 정렬할때 사용하는 Comparable , Comparator에 대해서 알아보자.</li>
  <li>각각의 차이는 무엇인지 알아보자.</li>
  <li>Java8에서 도입된 Lambda를 통해서 어떻게 간편하게 구현할 수 있는지 알아보자.</li>
</ul>

<h2 id="java에서-제공하는-기본-정렬">Java에서 제공하는 기본 정렬</h2>

<p>Java에서 이미 정렬에 관한 메서드를 제공해 준다. Arrays.sort(), Collections.sort()와 같은 메서드를 제공한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="kd">final</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">intArray</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
    <span class="c1">// 배열 기본 정렬</span>
    <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">intArray</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">intArray</span><span class="o">));</span>

    <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"a"</span><span class="o">,</span> <span class="s">"c"</span><span class="o">,</span> <span class="s">"d"</span><span class="o">,</span> <span class="s">"e"</span><span class="o">,</span> <span class="s">"b"</span><span class="o">,</span> <span class="s">"f"</span><span class="o">);</span>
    <span class="c1">// Collection 정렬</span>
    <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>다음과 같이 숫자는 오름차순, 문자도 오름차순으로 정렬된다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1, 3, 3, 5, 7, 8]
[a, b, c, d, e, f]
</code></pre></div></div>

<blockquote>
  <p>✅ TODO:  Arrays.sort(), Collections.sort()의 내부 구현이 어떻게 되어 있는지는 추가로 학습</p>
</blockquote>

<h2 id="객체-정렬">객체 정렬</h2>
<p>기본 문자열, 숫자가 아닌 <code class="language-plaintext highlighter-rouge">객체</code>에 관해서 특정 조건을 만족하는 정렬은 어떻게 해야할까? 
다음과 같이 <code class="language-plaintext highlighter-rouge">이름</code>과 <code class="language-plaintext highlighter-rouge">나이</code> 속성을 갖는 <code class="language-plaintext highlighter-rouge">User</code>객체를 만들어보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>3명의 유저를 만들고 배열 sort메서드를 호출한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="kd">final</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">User</span> <span class="n">andrew</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"andrew"</span><span class="o">,</span> <span class="mi">32</span><span class="o">);</span>
    <span class="kd">final</span> <span class="nc">User</span> <span class="n">berry</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">"berry"</span><span class="o">,</span> <span class="mi">26</span><span class="o">);</span>
    <span class="kd">final</span> <span class="nc">User</span> <span class="n">robert</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="s">"robert"</span><span class="o">,</span> <span class="mi">28</span><span class="o">);</span>
    <span class="kd">final</span> <span class="nc">User</span><span class="o">[]</span> <span class="n">users</span> <span class="o">=</span> <span class="o">{</span><span class="n">andrew</span><span class="o">,</span> <span class="n">berry</span><span class="o">,</span> <span class="n">robert</span><span class="o">};</span>

    <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">users</span><span class="o">);</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">users</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>
<p>다음과 같이 <code class="language-plaintext highlighter-rouge">cannot be cast to Comparable</code> class cast 예외가 발생한다.
 왜냐면 해당 객체의 3가지 속성이 있기 때문에 무엇으로 정렬할지를 알지 못하기 때문이다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Exception <span class="k">in </span>thread <span class="s2">"main"</span> java.lang.ClassCastException: com.example.demo.comparator.User cannot be cast to java.lang.Comparable
	at java.util.ComparableTimSort.countRunAndMakeAscending<span class="o">(</span>ComparableTimSort.java:320<span class="o">)</span>
	at java.util.ComparableTimSort.sort<span class="o">(</span>ComparableTimSort.java:188<span class="o">)</span>
	at java.util.Arrays.sort<span class="o">(</span>Arrays.java:1246<span class="o">)</span>
	at com.example.demo.comparator.ComparableTest.main<span class="o">(</span>ComparableTest.java:27<span class="o">)</span>
</code></pre></div></div>

<h2 id="방법1---comparable-구현">방법1 - Comparable 구현</h2>

<p>다시 User클래스로 돌아가서, Comparable인터페이스를 구현한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">implements</span> <span class="nc">Comparable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">User</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="o">(</span><span class="nc">User</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">-</span> <span class="n">user</span><span class="o">.</span><span class="na">age</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>해당 인터페이스를 구현하면, 반드시 compareTo라는 메서드를 오버라이딩으로 구현해줘야 한다. 메서드 안의 내용은 해당 객체의 어떤 필드를 기준으로 정렬을 할 것인지 구현한다. 나이순으로 정렬 하도록 작성했다. 다시 메인 메서드를 실행시키면 다음과 같다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>User<span class="o">{</span><span class="nb">id</span><span class="o">=</span>2, <span class="nv">name</span><span class="o">=</span><span class="s1">'berry'</span>, <span class="nv">age</span><span class="o">=</span>26<span class="o">}</span>,
 User<span class="o">{</span><span class="nb">id</span><span class="o">=</span>3, <span class="nv">name</span><span class="o">=</span><span class="s1">'robert'</span>, <span class="nv">age</span><span class="o">=</span>28<span class="o">}</span>, 
 User<span class="o">{</span><span class="nb">id</span><span class="o">=</span>1, <span class="nv">name</span><span class="o">=</span><span class="s1">'andrew'</span>, <span class="nv">age</span><span class="o">=</span>32<span class="o">}]</span>
</code></pre></div></div>

<p>age순으로 오름차순 정렬이 되었다.
하지만, Comparable의 단점은 클래스당 하나의 compareTo 메서드를 오버라이딩 하기 때문에 특정 정렬 기준만을 충족시킨다. 다이나믹하게 여러 가지 비교자를 만들어서 주입할 수 는 없을까?</p>

<h2 id="방법2---comparator-구현">방법2 - Comparator 구현</h2>

<p>Comparator는 Functional Interface로 하나의 추상메서드를 가지고 있다. 그리고 익명 함수 이기도 하다. 결국 람다식으로 표현이 가능하며, 정렬을 할때, 2번째 인자로 해당 Comparator를 넘길 수 있다. 기존의 Comparable 인터페이스 구현 부를 삭제하고 다양한 Comparaotr를 만들어 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// 생략</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">nameComparator</span> <span class="o">=</span> <span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">o1</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">o2</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">ageComparator</span> <span class="o">=</span> <span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">o1</span><span class="o">.</span><span class="na">age</span> <span class="o">-</span> <span class="n">o2</span><span class="o">.</span><span class="na">age</span><span class="o">;</span>
</code></pre></div></div>

<p>User클래스에 nameComparator, ageComparator를 각각 만들고, 람다식을 통해서 작성했다.
실제 사용은 다음과 같이 2번째 인자로 원하는 Comparator를 넘긴다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="kd">final</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="nc">User</span> <span class="n">andrew</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"andrew"</span><span class="o">,</span> <span class="mi">32</span><span class="o">);</span>
        <span class="kd">final</span> <span class="nc">User</span> <span class="n">berry</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">"berry"</span><span class="o">,</span> <span class="mi">26</span><span class="o">);</span>
        <span class="kd">final</span> <span class="nc">User</span> <span class="n">robert</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="s">"robert"</span><span class="o">,</span> <span class="mi">28</span><span class="o">);</span>

        <span class="kd">final</span> <span class="nc">User</span><span class="o">[]</span> <span class="n">users</span> <span class="o">=</span> <span class="o">{</span><span class="n">andrew</span><span class="o">,</span> <span class="n">berry</span><span class="o">,</span> <span class="n">robert</span><span class="o">};</span>
        <span class="c1">// 나이순으로 정렬</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">users</span><span class="o">,</span>  <span class="nc">User</span><span class="o">.</span><span class="na">ageComparator</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">users</span><span class="o">));</span>

        <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">userList</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">andrew</span><span class="o">,</span> <span class="n">berry</span><span class="o">,</span> <span class="n">robert</span><span class="o">);</span>
        <span class="c1">// 이름순으로 정렬</span>
        <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">userList</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">nameComparator</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userList</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>User<span class="o">{</span><span class="nb">id</span><span class="o">=</span>2, <span class="nv">name</span><span class="o">=</span><span class="s1">'berry'</span>, <span class="nv">age</span><span class="o">=</span>26<span class="o">}</span>, User<span class="o">{</span><span class="nb">id</span><span class="o">=</span>3, <span class="nv">name</span><span class="o">=</span><span class="s1">'robert'</span>, <span class="nv">age</span><span class="o">=</span>28<span class="o">}</span>, User<span class="o">{</span><span class="nb">id</span><span class="o">=</span>1, <span class="nv">name</span><span class="o">=</span><span class="s1">'andrew'</span>, <span class="nv">age</span><span class="o">=</span>32<span class="o">}]</span>
<span class="o">[</span>User<span class="o">{</span><span class="nb">id</span><span class="o">=</span>1, <span class="nv">name</span><span class="o">=</span><span class="s1">'andrew'</span>, <span class="nv">age</span><span class="o">=</span>32<span class="o">}</span>, User<span class="o">{</span><span class="nb">id</span><span class="o">=</span>2, <span class="nv">name</span><span class="o">=</span><span class="s1">'berry'</span>, <span class="nv">age</span><span class="o">=</span>26<span class="o">}</span>, User<span class="o">{</span><span class="nb">id</span><span class="o">=</span>3, <span class="nv">name</span><span class="o">=</span><span class="s1">'robert'</span>, <span class="nv">age</span><span class="o">=</span>28<span class="o">}]</span>
</code></pre></div></div>

<p>나이순으로, 이름순으로 정렬됨을 확인 할 수 있다.</p>

<h2 id="더-생각해-볼-것">더 생각해 볼 것</h2>

<p>자주 사용하는 Comparator를 저렇게 클래스안에 넣는 것도 좋은 방법이고, 사실 사용하는 쪽에서 다음과 같이 넘겨줄 수 도 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">users</span><span class="o">,</span>  <span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">o1</span><span class="o">.</span><span class="na">age</span> <span class="o">-</span> <span class="n">o2</span><span class="o">.</span><span class="na">age</span><span class="o">);</span>
</code></pre></div></div>

<p>하지만 요구 사항이 바뀌는 경우를 생각해보자. 나이순이 아니라, 어떤 특정한 조건으로 새롭게 정렬 한다고 했을 때 기존의 ageCompartor로 구현했더라면 이름과 내부 구현만 바꾸면 사용하는 쪽 코드를 전혀 손대지 않아도 된다. 하지만 일일이 클라이언트에서 넘기는 형태였다면?? 모든 관련된 코드를 전부 찾아야 한다. 그래서 첫번째 특정 클래스내에 자주 사용하는 Compartor를 구현해 놓는 게 훨씬 좋다고 생각한다.</p>
:ET