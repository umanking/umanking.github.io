I"o<blockquote>
  <p>spring web mvc의 HttpMessageConverter에 대해서 알아보자!</p>
  <h3 id="메세지-컨버터란">메세지 컨버터란?</h3>
</blockquote>

<p>http 요청 본문을 객체로, 객체를 http 응답 본문으로 변경해 주는 것</p>

<blockquote>
  <p>예제에서는 요청/응답 본문은 json 형식으로, 객체는 User를 통해서 살펴보자!</p>
</blockquote>

<h3 id="종류">종류</h3>

<ul>
  <li>JsonMessageConverter</li>
  <li>StringMessageConverter</li>
  <li>등등…</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>

<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/user/create"</span><span class="o">)</span>
  	<span class="nd">@ResponseBody</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">create</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>@ResponseBody가 없으면 -&gt; BeanNameViewResolver를 탄다</li>
  <li>@ResponseBody가 있으면 -&gt; MessageConverter를 탄다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@WebMvcTest</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserControllerTest</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="nc">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createUser_JSON</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">user</span> <span class="o">=</span> <span class="s">"{\"username\":  \"andrew\",\n"</span> <span class="o">+</span>
                <span class="s">"  \"password\": 1234"</span> <span class="o">+</span> <span class="s">"}"</span><span class="o">;</span>

      	<span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">post</span><span class="o">(</span><span class="s">"/user/create"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">contentType</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_UTF8</span><span class="o">)</span>
                <span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_UTF8</span><span class="o">)</span>
                <span class="o">.</span><span class="na">content</span><span class="o">(</span><span class="n">user</span><span class="o">))</span>

                <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">print</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.username"</span><span class="o">,</span> <span class="nc">Matchers</span><span class="o">.</span><span class="na">is</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="s">"andrew"</span><span class="o">))))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>content-type과 accept타입을 json으로 설정하고, user라는 json데이터를 요청본문에 담아서 해당 url를 호출해서 나온 결과값을 jsonpath 를 통해서 검증해 보자!</p>
:ET