I"A<blockquote>
  <p>자바에서 리플랙션은 하나의 기능으로, 내부 properties를 변경하거나 정보를 직접 얻어올 수 있는 manual적인 프로그래밍을 말합니다. 대표적으로 애플리케이션의 모든 클래스 정보, 혹은 메서드 정보를 직접 가져올 수 있습니다.</p>
</blockquote>

<!-- more -->

<h2 id="1-클래스-정보-가져오는-3가지-방법">1. 클래스 정보 가져오는 3가지 방법</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>

  <span class="c1">// 인스턴스에서 가져오기</span>
  <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
  <span class="nc">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">Member</span><span class="o">&gt;</span> <span class="n">m1Class</span> <span class="o">=</span> <span class="n">member</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>

  <span class="c1">// 타입으로 접근하는 방법</span>
  <span class="nc">Class</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">m2Class</span> <span class="o">=</span> <span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>

  <span class="c1">// full package name</span>
  <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">m3Class</span> <span class="o">=</span> <span class="nc">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">"com.example.demo.member"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>자바의 Class라는 API를 통해서 클래스 정보를 가지고 올 수 있다. 클래스 정보를 통해서 <code class="language-plaintext highlighter-rouge">필드</code>, <code class="language-plaintext highlighter-rouge">메서드</code>, <code class="language-plaintext highlighter-rouge">구현한 클래스</code>, <code class="language-plaintext highlighter-rouge">인터페이스</code> 를 가지고 올 수 있다. 특히나, 메서드, 필드에 접근할 때는 접근제한자가 private인 경우에는 <code class="language-plaintext highlighter-rouge">getDeclaredxxx()</code> 시리즈의 메서드가 전부다 가지고 올 수 있다. 또한, 접근이 불가능한 필드에 대해서는 각각의 필드에 대해서 <code class="language-plaintext highlighter-rouge">setAccesible(true)</code> 값을 주면 접근이 가능해 진다.</p>

<h2 id="2자바-애노테이션-사용하기">2.자바 @애노테이션 사용하기</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">CustomAnnotation</span> <span class="o">{</span>

<span class="o">}</span>

<span class="c1">// 사용할때</span>
<span class="nd">@CustomAnnotation</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>

  <span class="o">..</span><span class="c1">//생략</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@interface</code> 타입으로 클래스를 만들어서 사용할 수 있다. 하지만 <code class="language-plaintext highlighter-rouge">CustomAnnotation</code> 은 아무 기능도 하지 않는다. 그저 주석의 역할일 뿐, java파일이 compile이 되고 class파일까지 갔을때, 해당 어노테이션이 남아있긴 하지만, 바이트코드가 JVM에서 로딩이 되어 동작할때 까지 유지되지 않는다. 애노테이션의 기본이 <code class="language-plaintext highlighter-rouge">@Retention(RetentionPolicy.CLASS)</code> 이기 때문에 클래스파일 까지만 유지(Retaion)된다. <code class="language-plaintext highlighter-rouge">@Retention(RetentionPolicy.RUNTIME)</code> 으로 바꾸면 그제서야, 리플렉션을 통해서 접근할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">(</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">MyAnnotation</span><span class="o">{</span>

<span class="o">}</span>

<span class="nd">@MyAnnotaion</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span><span class="o">{</span>

<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
  <span class="nc">Class</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">memberClass</span> <span class="o">=</span> <span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
  <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">memberClass</span><span class="o">.</span><span class="na">getAnnotations</span><span class="o">()).</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 클래스에서 어노테이션 정보를 가지고 와서 사용할 수 있다.</p>

<h2 id="3객체-직접-만들기">3.객체 직접 만들기</h2>

<p>class에서 <code class="language-plaintext highlighter-rouge">getConstructor()</code> 메서드를 통해서 생성자를 가지고와서, <code class="language-plaintext highlighter-rouge">constructor.newInstance()</code> 를 통해서 만든다.</p>

<h2 id="추가-학습">추가 학습</h2>

<ul>
  <li>기본 생성자를 가지고 와서 인스턴스 만들기</li>
  <li>파미터가 있는 생성자를 가지고 와서 인스턴스 만들기(값을 넘겨줘야 함)</li>
  <li>만든 인스턴스의 필드에 get(), set()을 통해서 값을 변경하기</li>
  <li>만든 인스턴스의 메서드 호출하기</li>
</ul>
:ET