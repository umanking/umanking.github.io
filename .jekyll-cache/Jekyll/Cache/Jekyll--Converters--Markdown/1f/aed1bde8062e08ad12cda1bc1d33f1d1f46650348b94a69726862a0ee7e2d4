I"~"<h1 id="junit5-사용기">Junit5 사용기</h1>

<blockquote>
  <p>JUnit5의 새로운 것들 혹은 자주 사용하는 것들에 대해서 알아보자.</p>
  <h2 id="parameterizedtest">@ParameterizedTest</h2>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">@Test</code>대신에 <code class="language-plaintext highlighter-rouge">@ParameterizedTest</code> 를 사용하는 건데, 도대체 언제 사용할까?
파라미터 값을 다양하게 테스트를 하는 경우에 사용한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Numbers</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isEven</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>짝수인지를 검사하는 <code class="language-plaintext highlighter-rouge">isEven</code> 정적 메서드를 만든다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@ParameterizedTest</span>
    <span class="nd">@ValueSource</span><span class="o">(</span><span class="n">ints</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">})</span>
    <span class="kt">void</span> <span class="nf">isEven</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">assertTrue</span><span class="o">(</span><span class="nc">Numbers</span><span class="o">.</span><span class="na">isEven</span><span class="o">(</span><span class="n">number</span><span class="o">));</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>다음과 같이 <code class="language-plaintext highlighter-rouge">@ValueSource</code>를 검사하고자 하는 인자의 값을 <code class="language-plaintext highlighter-rouge">배열</code>에 담아서 테스트 케이스를 돌리면 다음과 같다.
@ValueSource에 담은 파라미터 하나하나를 Junit이 직접 테스트를 전부 다 한다. 👍
<img src="/assets/images/junit-test.png" alt="" /></p>

<p>또한, 다음과 같은 놈들과 @ParameterizedTest랑 같이 사용할 수도 있다.
파라미터의 Null과 Empty인 경우에도 매번 따로 테스트 케이스를 작성하지 않아도 된다.</p>

<ul>
  <li>@NullSource</li>
  <li>@NullAndEmptySource</li>
</ul>

<h2 id="displayname">@DisplayName</h2>

<p>Junit4에서는 메서드에 한글 이름을 넣어서 테스트 하는 경우를 봤다. 이게 의견이 분분해서 누군가는 테스트는 비즈니스 로직을 잘 품고 있어야 하기 때문에 한국인 개발자끼리 일하는 상황이면 괜찮다고 하는 분들도 있고, 절대적으로 메서드를 한글로 쓰는 것을 용냡하지 못하는 분들도 봤다. 아무튼 이런 문제를 @DisplayName을 통해서 해당 메서드가 정확히 무슨 일을 하는 지 명시할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"짝수 테스트"</span><span class="o">)</span>
    <span class="nd">@ParameterizedTest</span>
    <span class="nd">@ValueSource</span><span class="o">(</span><span class="n">ints</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">})</span>
    <span class="kt">void</span> <span class="nf">isEven</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">assertTrue</span><span class="o">(</span><span class="nc">Numbers</span><span class="o">.</span><span class="na">isEven</span><span class="o">(</span><span class="n">number</span><span class="o">));</span>
    <span class="o">}</span>
</code></pre></div></div>

<h2 id="beforeall-beforeeach-afterall-aftereach">@BeforeAll, @BeforeEach, @AfterAll, @AfterEach</h2>

<p>각각 Junit4에서 사용하던 어노테이션명이 변했다.</p>

<ul>
  <li>@BeforeClass -&gt; @BeforeAll : 테스트 실행전 딱 한번 실행함 (static 으로 만들어야 함)</li>
  <li>@Before -&gt; @BeforeEach : 모든 테스트 전에 실행함</li>
  <li>@AfterClass -&gt; @AfterAll : 테스트 실행 후 딱 한 번 실행함 (static 으로 만들어야 함)</li>
  <li>@After -&gt; @AfterEach : 모든 테스트 각각 종료 후에 실행함</li>
</ul>

<h2 id="exception-test">Exception Test</h2>

<p>이번에는 처음 짝수인지를 검증하는 메서드에 기능을 하나 추가 해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isEven</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">number</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>0보다 작은 값이 들어온 경우에 <code class="language-plaintext highlighter-rouge">IllegalArgumentException</code>를 발생 시킨다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"짝수 테스트: 음수값인 경우에 예외 발생"</span><span class="o">)</span>
    <span class="nd">@ParameterizedTest</span>
    <span class="nd">@ValueSource</span><span class="o">(</span><span class="n">ints</span> <span class="o">=</span> <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">2</span><span class="o">})</span>
    <span class="kt">void</span> <span class="nf">isEven_negative_test</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">assertThatExceptionOfType</span><span class="o">(</span><span class="nc">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">isThrownBy</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="nc">Numbers</span><span class="o">.</span><span class="na">isEven</span><span class="o">(</span><span class="n">number</span><span class="o">));</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>역시나 @ParameterizedTest와 <code class="language-plaintext highlighter-rouge">assertThatExceptionOfType</code>을 활용한다.
발생할 exception클래스를 적고 누구에 의해서 던져지는지(isThrownBy)를 명시한다. 다만 해당 메서드의 인자는 ThrowingCallable 이기 때문에 람다형태로 작성해 준다.</p>

<h2 id="정리">정리</h2>

<p>아주 간단한 Junit 테스트 use case를 작성했다. 더 많이 사용하고, 고민 하고 다시 포스팅을 해야 겠다.</p>
:ET