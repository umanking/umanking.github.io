I"B<h1 id="1-들어가며">1. 들어가며</h1>

<p>프록시의 기본과, JPA에서 fetch 전략이 어떤 것들이 있는 지 알아보자.</p>

<h3 id="프록시-기초">프록시 기초</h3>

<p>PA에서 식별자로 엔티티 하나를 조회할 때 <code class="language-plaintext highlighter-rouge">EntityManager.find()</code>를 사용한다. 이 메서드는 영속성 컨텍스트에 엔티티가 없으면 데이터 베이스를 조회한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"member1"</span><span class="o">);</span>
</code></pre></div></div>

<p>만약에 엔티티를 실제 사용하는 시점까지 데이터베이스 조회를 미루고 싶으면 <code class="language-plaintext highlighter-rouge">EntityManger.getReference()</code>를 사용한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">getReference</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"member1"</span><span class="o">);</span>
</code></pre></div></div>

<p>이 메소드를 호출할 때 JPA는 데이터베이스를 조회하지 않고 실제 엔티티 객체도 생성하지 않는다. 대신에 데이터베이스 접근을 위임한 프록시 객체를 반환한다.</p>

<p>즉시로딩 시, JPA는 외부조인(Left Outer) 조인을 사용한다. 그 이유는 내부조인을 사용하게 되면, 외래키 null값이 존재하는 경우, 우리가 원하는 어떤 데이터도 조회할 수 없기 때문이다. 성능적인 측면에서 내부 조인이 좋기 때문에. 내부조인을 사용할려면, 외래키를 not null 조건으로 특정해야 한다</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
  <span class="c1">//...</span>
  <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">EAGER</span><span class="o">)</span>
  <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"TEAM_ID"</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">Team</span> <span class="n">team</span><span class="o">;</span>
  <span class="c1">//...</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="2-예제코드">2. 예제코드</h1>

<p>위의 말이 정확히 이해가 가지 않아서 테스트 케이스를 작성해 보자.<br />
간단한 Team(1): Member(N) 관계를 갖고 (양방향 관계) 매핑을 해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"TEAM"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Team</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"TEAM_ID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"NAME"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@OneToMany</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">memberList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"MEMBER"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"MEMBER_ID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"NAME"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"AGE"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">age</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"TEAM_ID"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Team</span> <span class="n">team</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">teamTest</span><span class="o">()</span> <span class="o">{</span>

        <span class="c1">//Given</span>
        <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"andrew"</span><span class="o">);</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">32</span><span class="o">);</span>

        <span class="nc">Team</span> <span class="n">team</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Team</span><span class="o">();</span>
        <span class="n">team</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"A팀"</span><span class="o">);</span>

        <span class="c1">//연관관계 설정</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setTeam</span><span class="o">(</span><span class="n">team</span><span class="o">);</span>
        <span class="n">team</span><span class="o">.</span><span class="na">getMemberList</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="n">teamRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">team</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="c1">//When</span>
        <span class="nc">Member</span> <span class="n">existMember</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()).</span><span class="na">get</span><span class="o">();</span>

        <span class="c1">//Then</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="n">existMember</span><span class="o">.</span><span class="na">getTeam</span><span class="o">().</span><span class="na">getName</span><span class="o">(),</span> <span class="s">"A팀"</span><span class="o">);</span>

    <span class="o">}</span>
</code></pre></div></div>

<p>이 테스트는 Member, Team 객체를 저장 하고, 객체 그래프 탐색하는 테스트 케이스 입니다.</p>

<blockquote>
  <p>위에서 언급했듯이, 즉시 로딩한 경우, left outer join 을 한다.</p>
</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">select</span>
        <span class="nx">member0_</span><span class="p">.</span><span class="nx">member_id</span> <span class="k">as</span> <span class="nx">member_i1_1_0_</span><span class="p">,</span>
        <span class="nx">member0_</span><span class="p">.</span><span class="nx">age</span> <span class="k">as</span> <span class="nx">age2_1_0_</span><span class="p">,</span>
        <span class="nx">member0_</span><span class="p">.</span><span class="nx">name</span> <span class="k">as</span> <span class="nx">name3_1_0_</span><span class="p">,</span>
        <span class="nx">member0_</span><span class="p">.</span><span class="nx">team_id</span> <span class="k">as</span> <span class="nx">team_id4_1_0_</span><span class="p">,</span>
        <span class="nx">team1_</span><span class="p">.</span><span class="nx">team_id</span> <span class="k">as</span> <span class="nx">team_id1_2_1_</span><span class="p">,</span>
        <span class="nx">team1_</span><span class="p">.</span><span class="nx">name</span> <span class="k">as</span> <span class="nx">name2_2_1_</span>
    <span class="k">from</span>
        <span class="nx">member</span> <span class="nx">member0_</span>
    <span class="nx">left</span> <span class="nx">outer</span> <span class="nx">join</span>
        <span class="nx">team</span> <span class="nx">team1_</span>
            <span class="nx">on</span> <span class="nx">member0_</span><span class="p">.</span><span class="nx">team_id</span><span class="o">=</span><span class="nx">team1_</span><span class="p">.</span><span class="nx">team_id</span>
    <span class="nx">where</span>
        <span class="nx">member0_</span><span class="p">.</span><span class="nx">member_id</span><span class="o">=</span><span class="p">?</span>
</code></pre></div></div>

<h3 id="jpa-에서-기본-fetch-전략">JPA 에서 기본 Fetch 전략</h3>

<p>즉시 로딩인지 아닌지 알아 보기 위해서 fetch 옵션을 살펴보자. JPA에서는 기본 fetch 전략은 다음과 같다.</p>

<ul>
  <li>@OneToMany // fetch = FetchType.LAZY</li>
  <li>@ManyToOne // fetch = FetchType.EAGER</li>
</ul>

<p>연관 관계가 1:N 으로 매핑이 되면, 당연히 즉시 로딩하게 되면, 매번 조인 쿼리가 발생하기 때문에 성능에 안 좋은 영향을 미친다. 그와는 반대로 N:1 은 즉시 로딩이 기본 전략이다.</p>

<p>위의 예제에서는 Member(N): Team(1) 이기 때문에 즉시 로딩이 된다.</p>

<p>이번에는 lazy 로딩으로 테스트 해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">lazy로딩_teamTest</span><span class="o">()</span> <span class="o">{</span>

        <span class="c1">//Given</span>
        <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"andrew"</span><span class="o">);</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">32</span><span class="o">);</span>

        <span class="nc">Team</span> <span class="n">team</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Team</span><span class="o">();</span>
        <span class="n">team</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"A팀"</span><span class="o">);</span>

        <span class="c1">//연관관계 설정</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setTeam</span><span class="o">(</span><span class="n">team</span><span class="o">);</span>
        <span class="n">team</span><span class="o">.</span><span class="na">getMemberList</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="n">teamRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">team</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="c1">//When</span>
        <span class="nc">Team</span> <span class="n">existTeam</span> <span class="o">=</span> <span class="n">teamRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">team</span><span class="o">.</span><span class="na">getId</span><span class="o">()).</span><span class="na">get</span><span class="o">();</span>

        <span class="c1">//Then</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="n">existTeam</span><span class="o">.</span><span class="na">getMemberList</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getName</span><span class="o">(),</span> <span class="s">"andrew"</span><span class="o">);</span>

    <span class="o">}</span>
</code></pre></div></div>

<p>다음과 같은 Exception이 발생한다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">org</span><span class="p">.</span><span class="nx">hibernate</span><span class="p">.</span><span class="nx">LazyInitializationException</span><span class="p">:</span> <span class="nx">failed</span> <span class="nx">to</span> <span class="nx">lazily</span> <span class="nx">initialize</span> <span class="nx">a</span> <span class="nx">collection</span> <span class="k">of</span> <span class="nx">role</span><span class="p">:</span> <span class="nx">com</span><span class="p">.</span><span class="nx">example</span><span class="p">.</span><span class="nx">demo</span><span class="p">.</span><span class="nx">spring</span><span class="p">.</span><span class="nx">jpa</span><span class="p">.</span><span class="nx">team</span><span class="p">.</span><span class="nx">Team</span><span class="p">.</span><span class="nx">memberList</span><span class="p">,</span> <span class="nx">could</span> <span class="nx">not</span> <span class="nx">initialize</span> <span class="nx">proxy</span> <span class="o">-</span> <span class="nx">no</span> <span class="nx">Session</span>
</code></pre></div></div>

<p>해결방법은</p>

<ul>
  <li>fetchType을 earger로 변경</li>
  <li>join fetch</li>
</ul>

<p>두 개가 같은 쿼리를 만드나..?</p>

<h3 id="todo">TODO</h3>

<ul>
  <li>QueryDSL로 쿼리를 짜보면서, 어떤 차이가 있는지 확인할 예정</li>
</ul>
:ET