I"<4<blockquote>
  <p>DispatcherSevlet의 기본전략과 여러가지 유형에 대해서 알아보자.</p>
  <h3 id="dispatcherservlet-기본전략">DispatcherServlet 기본전략</h3>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initStrategies</span><span class="o">(</span><span class="nc">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">initMultipartResolver</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initLocaleResolver</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initThemeResolver</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initHandlerMappings</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initHandlerAdapters</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initHandlerExceptionResolvers</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initRequestToViewNameTranslator</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initViewResolvers</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
		<span class="n">initFlashMapManager</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
	<span class="o">}</span>
</code></pre></div></div>

<p>DispatcherServlet 의 초기화 전략은 다음과 같다. 초기화 구조는 거의다 비슷하기 때문에 여기에서는 <code class="language-plaintext highlighter-rouge">initViewResolvers(context)</code> 를 살펴보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="cm">/**
	 * Initialize the ViewResolvers used by this class.
	 * &lt;p&gt;If no ViewResolver beans are defined in the BeanFactory for this
	 * namespace, we default to InternalResourceViewResolver.
	 */</span>
	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">initViewResolvers</span><span class="o">(</span><span class="nc">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">viewResolvers</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

		<span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">detectAllViewResolvers</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">// Find all ViewResolvers in the ApplicationContext, including ancestor contexts.</span>
			<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">ViewResolver</span><span class="o">&gt;</span> <span class="n">matchingBeans</span> <span class="o">=</span>
					<span class="nc">BeanFactoryUtils</span><span class="o">.</span><span class="na">beansOfTypeIncludingAncestors</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="nc">ViewResolver</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
			<span class="k">if</span> <span class="o">(!</span><span class="n">matchingBeans</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
				<span class="k">this</span><span class="o">.</span><span class="na">viewResolvers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">matchingBeans</span><span class="o">.</span><span class="na">values</span><span class="o">());</span>
				<span class="c1">// We keep ViewResolvers in sorted order.</span>
				<span class="nc">AnnotationAwareOrderComparator</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">viewResolvers</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">else</span> <span class="o">{</span>
			<span class="k">try</span> <span class="o">{</span>
				<span class="nc">ViewResolver</span> <span class="n">vr</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="no">VIEW_RESOLVER_BEAN_NAME</span><span class="o">,</span> <span class="nc">ViewResolver</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
				<span class="k">this</span><span class="o">.</span><span class="na">viewResolvers</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">singletonList</span><span class="o">(</span><span class="n">vr</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="k">catch</span> <span class="o">(</span><span class="nc">NoSuchBeanDefinitionException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
				<span class="c1">// Ignore, we'll add a default ViewResolver later.</span>
			<span class="o">}</span>
		<span class="o">}</span>

		<span class="c1">// Ensure we have at least one ViewResolver, by registering</span>
		<span class="c1">// a default ViewResolver if no other resolvers are found.</span>
		<span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">viewResolvers</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">this</span><span class="o">.</span><span class="na">viewResolvers</span> <span class="o">=</span> <span class="n">getDefaultStrategies</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="nc">ViewResolver</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isTraceEnabled</span><span class="o">())</span> <span class="o">{</span>
				<span class="n">logger</span><span class="o">.</span><span class="na">trace</span><span class="o">(</span><span class="s">"No ViewResolvers declared for servlet '"</span> <span class="o">+</span> <span class="n">getServletName</span><span class="o">()</span> <span class="o">+</span>
						<span class="s">"': using default strategies from DispatcherServlet.properties"</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>
</code></pre></div></div>

<p>크게 <code class="language-plaintext highlighter-rouge">this.detectAllViewResolvers</code> 의 boolean 값(default = true) 에 의해서 viewReoslvers 들을 찾는다. 그리고 만약에 <code class="language-plaintext highlighter-rouge">this.viewResolvers</code> 가 null 이면 <code class="language-plaintext highlighter-rouge">getDefaultStrageies()</code> default 전략으로 viewResolver를 찾는다.</p>

<p>아래는 <code class="language-plaintext highlighter-rouge">DispacherServlet.properties</code> 에 정의되어 있는 기본전략이다.</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Default implementation classes for DispatcherServlet's strategy interfaces.
# Used as fallback when no matching beans are found in the DispatcherServlet context.
# Not meant to be customized by application developers.
</span>
<span class="py">org.springframework.web.servlet.LocaleResolver</span><span class="p">=</span><span class="s">org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver</span>

<span class="py">org.springframework.web.servlet.ThemeResolver</span><span class="p">=</span><span class="s">org.springframework.web.servlet.theme.FixedThemeResolver</span>

<span class="py">org.springframework.web.servlet.HandlerMapping</span><span class="p">=</span><span class="s">org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,</span><span class="se">\
</span>	<span class="s">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</span>

<span class="py">org.springframework.web.servlet.HandlerAdapter</span><span class="p">=</span><span class="s">org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,</span><span class="se">\
</span>	<span class="s">org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,</span><span class="se">\
</span>	<span class="s">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</span>

<span class="py">org.springframework.web.servlet.HandlerExceptionResolver</span><span class="p">=</span><span class="s">org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver,</span><span class="se">\
</span>	<span class="s">org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,</span><span class="se">\
</span>	<span class="s">org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</span>

<span class="py">org.springframework.web.servlet.RequestToViewNameTranslator</span><span class="p">=</span><span class="s">org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</span>

<span class="py">org.springframework.web.servlet.ViewResolver</span><span class="p">=</span><span class="s">org.springframework.web.servlet.view.InternalResourceViewResolver</span>

<span class="py">org.springframework.web.servlet.FlashMapManager</span><span class="p">=</span><span class="s">org.springframework.web.servlet.support.SessionFlashMapManager</span>
</code></pre></div></div>

<p>여기에서 <code class="language-plaintext highlighter-rouge">ViewSolver</code> 의 기본 전략은 <code class="language-plaintext highlighter-rouge">InternalResourceViewResovler</code> 이다</p>

<h3 id="다양한-dispatcherservlet-전략들">다양한 DispatcherServlet 전략들</h3>

<h4 id="multipartresolver">MultipartResolver</h4>

<ul>
  <li>파일 업로드 요청 처리에 필요한 인터페이스</li>
  <li>HttpServletRequest를 MultipartHttpServletRequest로 변환해주어 요청이 담고 있는 File을 꺼낼 수 있는 API 제공.</li>
</ul>

<h4 id="localeresolver">LocaleResolver</h4>

<ul>
  <li>클라이언트의 위치(Locale) 정보를 파악하는 인터페이스</li>
  <li>기본 전략은 요청의 accept-language를 보고 판단.</li>
</ul>

<h4 id="themeresolver">ThemeResolver</h4>

<ul>
  <li>애플리케이션에 설정된 테마를 파악하고 변경할 수 있는 인터페이스</li>
  <li>참고: <a href="https://memorynotfound.com/spring-mvc-theme-switcher-example/">https://memorynotfound.com/spring-mvc-theme-switcher-example/</a></li>
</ul>

<h4 id="handlermapping">HandlerMapping</h4>

<ul>
  <li>요청을 처리할 핸들러를 찾는 인터페이스</li>
</ul>

<h4 id="handleradapter">HandlerAdapter</h4>

<ul>
  <li>HandlerMapping이 찾아낸 “핸들러”를 처리하는 인터페이스</li>
</ul>

<h4 id="handlerexceptionresolver">HandlerExceptionResolver</h4>

<ul>
  <li>요청 처리 중에 발생한 에러 처리하는 인터페이스</li>
</ul>

<h4 id="requesttoviewnametranslator">RequestToViewNameTranslator</h4>

<ul>
  <li>핸들러에서 뷰 이름을 명시적으로 리턴하지 않은 경우, 요청을 기반으로 뷰 이름을 판단하는 인터페이스</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/sample"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">sample</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"sample"</span><span class="o">;</span>
    <span class="o">}</span>

		<span class="c1">//아무것도 리턴을 void로 해도, /sample 요청에 의해서 viewName으로 바꿔준다.</span>
		<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/sample"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sample</span><span class="o">()</span> <span class="o">{}</span>

</code></pre></div></div>

<h4 id="viewresolver">ViewResolver</h4>

<ul>
  <li>뷰 이름(string)에 해당하는 뷰를 찾아내는 인터페이스</li>
</ul>

<h4 id="flashmapmanager">FlashMapManager</h4>

<ul>
  <li>폼정보를 submit하고 POST 요청을 했을 때 -&gt; GET 요청으로 화면을 리다이렉트 시키는 목적
여기에서 브라우저 화면을 refresh 했을때, 다시 form 정보로 보여지지 않게 하기 위함 !!</li>
</ul>
:ET