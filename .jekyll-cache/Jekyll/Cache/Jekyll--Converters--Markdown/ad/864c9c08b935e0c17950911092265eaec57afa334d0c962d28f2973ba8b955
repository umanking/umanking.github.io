I"`%<h2 id="개요">개요</h2>

<ul>
  <li>스프링에서 제공하는 <code class="language-plaintext highlighter-rouge">MultipartFile</code> 이라는 인터페이스를 통해서 파일업로드 하는 방법에 대해서 알아보자.</li>
  <li>예제는 MVC(thymleafe)를 통한, 간단한 파일 업로드이고, 자신의 홈디렉토리에 저장하는 것을 구현한다.</li>
</ul>

<h2 id="파일-업로드하는-fileservice">파일 업로드하는 FileService</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileService</span> <span class="o">{</span>

    <span class="c1">// application.properties 에 app.upload.dir을 정의하고, 없는 경우에 default 값으로 user.home (System에 종속적인)</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${app.upload.dir:${user.home}}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">uploadDir</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">fileUpload</span><span class="o">(</span><span class="nc">MultipartFile</span> <span class="n">multipartFile</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// File.seperator 는 OS종속적이다.</span>
        <span class="c1">// Spring에서 제공하는 cleanPath()를 통해서 ../ 내부 점들에 대해서 사용을 억제한다</span>
        <span class="nc">Path</span> <span class="n">copyOfLocation</span> <span class="o">=</span> <span class="nc">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">uploadDir</span> <span class="o">+</span> <span class="nc">File</span><span class="o">.</span><span class="na">separator</span> <span class="o">+</span> <span class="nc">StringUtils</span><span class="o">.</span><span class="na">cleanPath</span><span class="o">(</span><span class="n">multipartFile</span><span class="o">.</span><span class="na">getOriginalFilename</span><span class="o">()));</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// inputStream을 가져와서</span>
            <span class="c1">// copyOfLocation (저장위치)로 파일을 쓴다.</span>
            <span class="c1">// copy의 옵션은 기존에 존재하면 REPLACE(대체한다), 오버라이딩 한다</span>
            <span class="nc">Files</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">multipartFile</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">(),</span> <span class="n">copyOfLocation</span><span class="o">,</span> <span class="nc">StandardCopyOption</span><span class="o">.</span><span class="na">REPLACE_EXISTING</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">FileStorageException</span><span class="o">(</span><span class="s">"Could not store file : "</span> <span class="o">+</span> <span class="n">multipartFile</span><span class="o">.</span><span class="na">getOriginalFilename</span><span class="o">());</span>
        <span class="o">}</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>스프링에서 제공하는 <code class="language-plaintext highlighter-rouge">MultipartFile</code> 이라는 인터페이스를 이용해서, HTTP multipart 요청을 처리한다.
MultipartFile 요청은 큰 파일을 청크 단위로 쪼개서 효율적으로 파일 업로드 할 수 있게 해준다.
MultipartFile 인터페이스를 열어보면 다음과 같이 나와있다.</p>

<blockquote>
  <p>A representation of an uploaded file received in a multipart request.</p>
</blockquote>

<p>이제, 다시 본로으로 돌아와서 실제 위의 작성한 코드를 살펴보면
Paths.get() 메서드를 통해서 저장할 위치(copyOfLocation)을 지정한다. 여기서 중요한 것은 <code class="language-plaintext highlighter-rouge">File.seperator</code> 가 OS 종속적으로 mac이나 리눅스 계열에서는 <code class="language-plaintext highlighter-rouge">/</code> 윈도우에서는 <code class="language-plaintext highlighter-rouge">\</code> 구분자를 나타낸다. 또한, <code class="language-plaintext highlighter-rouge">StringUtils.cleanPath</code>를 사용한다.</p>

<p>그리고, Files.copy()메서드를 통해서 multipartFile의 inputstream을 얻어서 위에서 지정한 copyOfLocation에 파일을 쓴다.
정확히 Files.copy()메서드의 정의를 살펴보면 다음과 같다.</p>

<blockquote>
  <p>Copies all bytes from an input stream to a file. On return, the input
stream will be at end of stream.
input stream으로 얻은 모든 bytes 들을 file로 copy한다.</p>
</blockquote>

<h2 id="filecontroller">FileController</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileController</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">FileService</span> <span class="n">fileService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">index</span><span class="o">(){</span>
        <span class="k">return</span> <span class="s">"upload"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/upload"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">fileUpload</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"file"</span><span class="o">)</span> <span class="nc">MultipartFile</span> <span class="n">file</span><span class="o">,</span> <span class="nc">RedirectAttributes</span> <span class="n">redirectAttributes</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">fileService</span><span class="o">.</span><span class="na">fileUpload</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>

        <span class="n">redirectAttributes</span><span class="o">.</span><span class="na">addFlashAttribute</span><span class="o">(</span><span class="s">"message"</span><span class="o">,</span>
                <span class="s">"You successfully uploaded "</span> <span class="o">+</span> <span class="n">file</span><span class="o">.</span><span class="na">getOriginalFilename</span><span class="o">()</span> <span class="o">+</span> <span class="s">"!"</span><span class="o">);</span>

        <span class="k">return</span> <span class="s">"redirect:/"</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<h2 id="uploadhtml-파일">upload.html 파일</h2>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">xmlns:th=</span><span class="s">"http://www.thymeleaf.org"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;title&gt;</span>Title<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>File Upload Example<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">"post"</span> <span class="na">th:action=</span><span class="s">"@{/upload}"</span> <span class="na">enctype=</span><span class="s">"multipart/form-data"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"file"</span> <span class="na">name=</span><span class="s">"file"</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"submit"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>여기서는 form 태그에 input type을 file로 받아서, form을 submit하면 <code class="language-plaintext highlighter-rouge">FileController</code>에 정의했던 API를 타게 된다.
중요한 건 input의 name를 <code class="language-plaintext highlighter-rouge">file</code> 로 한 부분이 <code class="language-plaintext highlighter-rouge">FileController</code> 의 <code class="language-plaintext highlighter-rouge">@ReuqestParam("file")</code> 이 부분과 일치해야 한다.</p>
:ET