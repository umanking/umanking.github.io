I""<h2 id="handlermethodargumentresolver">HandlerMethodArgumentResolver</h2>
<p>HandlerMethodArgumentResolver 인터페이스는 컨트롤러에서 파라미터 바인딩 해주는 역할을 합니다.</p>

<blockquote>
  <p>Strategy Interface for resolving method parameters into argument values in the context of a given request.</p>
</blockquote>

<p>요청의 메서드 파라미터를 아규먼트의 값으로 resolve하는 인터페이스입니다. 흔히, 컨트롤러단에서 @RequestParam , @RequestBody, @ModelAttribute 와 같은 어노테이션 요청이나 클래스/인터페이스로 파라미터로 선언한 경우에 바인딩 해줍니다.</p>

<h2 id="실제-구현체-예제--pageablehandlermethodargumentresolver">실제 구현체 예제- PageableHandlerMethodArgumentResolver</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span><span class="o">(</span><span class="s">"/api/v1/post"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Class</span> <span class="nc">PostController</span> <span class="o">{</span>

  <span class="nd">@Autowired</span>
  <span class="kd">private</span> <span class="nc">PostService</span> <span class="n">postService</span><span class="o">;</span>

  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/list"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Post</span><span class="o">&gt;</span> <span class="nf">list</span><span class="o">(</span><span class="nc">Pageable</span> <span class="n">pageable</span><span class="o">){</span>
  	<span class="k">return</span> <span class="n">postService</span><span class="o">.</span><span class="na">list</span><span class="o">(</span><span class="n">pageable</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>게시판의 Post목록 데이터를 불러오는 list메서드를 생각해보면, 메서드의 인자로 Pageable(<code class="language-plaintext highlighter-rouge">package org.springframework.data.domain</code> 패키지에 있는)를 넘겼을 때 아무것도 한게 없는데 페이징이 되는 이유를 아시나요 ?</p>

<p>앞에서 설명했던 PageableHandlerMethodArgumentResolver 클래스가HandlerMethodArgumentResolver를 구현했기 때문에 메서드의 파라미터로 들어온 요청에 대한 Binding을 해당 구현클래스인 PageableHandlerMethodArgumentReoslver가 해줍니다. 그렇기 때문에 아무렇지 않게 사용할 수 있었던 것입니다.</p>

<h2 id="커스텀하게-구현하기---mycustomhandlermethodargumentresolver">커스텀하게 구현하기 - MyCustomHandlerMethodArgumentResolver</h2>

<p>이번에는 앞에서 설명한 HandlerMethodArgumentResolver를 내 입맛에 맞는 구현을 직접 해봅시다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이름과 이메일을 받는 User라는 클래스를 만듭니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCustomHandlerMethodArgumentResolver</span> <span class="kd">implements</span> <span class="nc">HandlerMethodArgumentResolver</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsParameter</span><span class="o">(</span><span class="nc">MethodParameter</span> <span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">isAssignableFrom</span><span class="o">(</span><span class="n">parameter</span><span class="o">.</span><span class="na">getParameterType</span><span class="o">());</span>
  <span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="nc">User</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="nc">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="nc">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span> <span class="nc">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="nc">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="c1">// 바인딩할 객체를 조작할 수 있다.</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">"andrew han"</span><span class="o">,</span> <span class="s">"umanking@gmail.com"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>HandlerMethodArgumentResolver를 구현을 합니다. 첫번째 supportsParameter메서드는 바인딩할 클래스를 지정해줍니다. 두번째, resolveArgument메서드는 바인딩할 객체를 조작할 수 있다. 여기에서는 새로운 User 클래스를 만들어서 이름과 이메일정보를 넘겼습니다.</p>

<p>내 입맛에 맞게 구현한 MyCustomHandlerMethodArgumentResolver를 빈으로 등록합니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebMvcConfigure</span> <span class="kd">implements</span> <span class="nc">WebMvcConfigurer</span> <span class="o">{</span>

  <span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">MyCustomHandlerMethodArgumentResolver</span> <span class="nf">myCustomHandlerMethodArgumentResolver</span><span class="o">()</span> <span class="o">{</span> 			<span class="k">return</span> <span class="k">new</span> <span class="nc">MyCustomHandlerMethodArgumentResolver</span><span class="o">();</span>
	<span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addArgumentResolvers</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">HandlerMethodArgumentResolver</span><span class="o">&gt;</span> <span class="n">resolvers</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">resolvers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">myCustomHandlerMethodArgumentResolver</span><span class="o">())</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>실제 요청을 날리게 되면 MyCustomHandlerMethodArgumentResolver에서 정의한 resolveArgument 메서드를 호출함으로써 <code class="language-plaintext highlighter-rouge">new User(“andrew”, “umanking@gmail.com”)</code> 의 값을 리던하게 되고 원하는 결과를 얻게 됩니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span><span class="o">(</span><span class="s">"/api/v1/user"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span><span class="o">{</span>

  <span class="nd">@GetMapping</span>
  <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUser</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">){</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="참고">참고</h2>

<ul>
  <li>http://wonwoo.ml/index.php/post/1092</li>
  <li>https://lelecoder.tistory.com/107</li>
</ul>
:ET