I"Y"<p>오늘은 Spring Data JPA가 제공하는 <strong>Audit 기능</strong>을 알아보자. Audit은 주로 DB값이 변경했을 때 누가 값을 변경했고, 언제 변경했는지 Audit(감사)하는 용도로 사용한다. Spring Data JPA는 <code class="language-plaintext highlighter-rouge">@CreatedDate</code>, <code class="language-plaintext highlighter-rouge">@LastModifiedDate</code>, <code class="language-plaintext highlighter-rouge">@CreatedBy</code>, <code class="language-plaintext highlighter-rouge">@LastModifiedBy</code> 와 같은 어노테이션을 제공한다.</p>

<h2 id="1-enablejpaauditing-추가">1. @EnableJpaAuditing 추가</h2>

<p><code class="language-plaintext highlighter-rouge">@EnableJpaAuditing</code> 어노테이션을 RootClass의 최 상단에 추가한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="nd">@EnableJpaAuditing</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="c1">// 생략</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="2-해당-entity에-auditingentitylistener를-등록">2. 해당 Entity에 <code class="language-plaintext highlighter-rouge">AuditingEntityListener</code> 를 등록</h2>

<p>해당 엔티티에 클래스 레벨에 <code class="language-plaintext highlighter-rouge">@EntityListeners</code>를 선언하고,<code class="language-plaintext highlighter-rouge">AuditingEntityListner</code>를 등록한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="nd">@Entity</span>
<span class="c1">// 엔티티 리스너 등록</span>
<span class="nd">@EntityListeners</span><span class="o">(</span><span class="nc">AuditingEntityListener</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Comment</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">comment</span><span class="o">;</span>

</code></pre></div></div>

<h2 id="3-audit할-날짜-필드를-정의한다">3. Audit할 날짜 필드를 정의한다.</h2>

<p>해당 엔티티에 Audit을 할 필드를 정의한다. (생성일,수정일 )</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// Audit 날짜 field를 정의한다.</span>
    <span class="nd">@CreatedDate</span>
    <span class="kd">private</span> <span class="nc">Date</span> <span class="n">createdDate</span><span class="o">;</span>

    <span class="nd">@LastModifiedDate</span>
    <span class="kd">private</span> <span class="nc">Date</span> <span class="n">lastModifiedDate</span><span class="o">;</span>

</code></pre></div></div>

<h2 id="4-audit하는-작성자-필드를-정의한다">4. Audit하는 작성자 필드를 정의한다.</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// Audit 작성자 field를 정의한다.</span>
    <span class="nd">@CreatedBy</span>
    <span class="nd">@ManyToOne</span>
    <span class="kd">private</span> <span class="nc">Account</span> <span class="n">createdBy</span><span class="o">;</span>

    <span class="nd">@LastModifiedBy</span>
    <span class="nd">@ManyToOne</span>
    <span class="kd">private</span> <span class="nc">Account</span> <span class="n">updatedBy</span><span class="o">;</span>

</code></pre></div></div>

<p>DB의 변경사항을 일으키는 Author를 Account클래스의 객체와 매핑했다.<br />
Account 클래스는 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Account</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@CreatedBy</code>와 <code class="language-plaintext highlighter-rouge">@LastModifiedBy</code> 는 Spring Security의 ContextHolder안에 들어있는 Principal(신원정보)의 name값으로 매핑을 해준다.
만약에 Custom하게 구현할려면 아래와 같이 <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/domain/AuditorAware.html">AuditorAware</a> 인터페이스를 구현해야 한다.
Spring Security의 ContextHolder에 존재하는 Authentication 정보를 통해서 매핑한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AccountAwareAudit</span> <span class="kd">implements</span> <span class="nc">AuditorAware</span><span class="o">&lt;</span><span class="nc">Comment</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Comment</span><span class="o">&gt;</span> <span class="nf">getCurrentAuditor</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Spring Security를 통한 Auditor 매핑</span>
        <span class="nc">Authentication</span> <span class="n">authentication</span> <span class="o">=</span> <span class="nc">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">getAuthentication</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">authentication</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">authentication</span><span class="o">.</span><span class="na">isAuthenticated</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="o">((</span><span class="nc">MyUserDetails</span><span class="o">)</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">()).</span><span class="na">getUser</span><span class="o">();</span>
    <span class="o">}</span>

</code></pre></div></div>

<p>이렇게 만든 빈(AccountAwareAudit)을 참조할 수 있도록 @EnableJpaAuditing의 auditorAwareRef 속성값으로 등록 해준다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="nd">@EnableJpaAuditing</span><span class="o">(</span><span class="n">auditorAwareRef</span> <span class="o">=</span> <span class="s">"accountAwareAudit"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>

    <span class="c1">// 생략</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="정리">정리</h2>

<p>Spring Data Jpa가 제공하는 엔티티의 변화를 추적하는 Audit 기능에 대해서 알아보았다.<br />
날짜 Audit은 제공해준 어노테이션 기반으로 구현할 부분이 없었지만, 작성자에 관한 부분은 대부분 Spring Security를 사용하기 때문에 ContextHolder를 통해서 신원정보를 가져와서 매핑해 주었다.</p>

<h2 id="참고자료">참고자료</h2>

<ul>
  <li><a href="https://www.baeldung.com/database-auditing-jpa">Auditing with JPA, Hibernate, and Spring Data JPA
</a></li>
  <li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-jpa">인프런 스프링 데이터 JPA</a></li>
</ul>
:ET