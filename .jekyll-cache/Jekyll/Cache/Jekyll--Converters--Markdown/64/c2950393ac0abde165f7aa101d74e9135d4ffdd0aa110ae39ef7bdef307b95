I" ?<h1 id="실무에서-필요한jpa---연관관계-매핑기초3">실무에서 필요한JPA - 연관관계 매핑(기초)(3)</h1>

<h2 id="1-학습목표">1. 학습목표</h2>

<ul>
  <li>단방향 연관관계 매핑을 이해한다.</li>
  <li>양방향 연관관계 매핑을 이해한다.
    <ul>
      <li>연관관계의 주인을 이해한다.</li>
      <li>연관관계 편의메서드 작성을 이해한다.</li>
    </ul>
  </li>
</ul>

<h2 id="2-들어가며">2. 들어가며</h2>

<ul>
  <li>엔티티들은 다른 엔티티와 연관관계가 있다.</li>
  <li>객체는 참조(주소)를 사용해서 관계를 맺고, 테이블은 외래 키를 사용해서 관계를 맺는다. 이 둘은 완전히 다른 특징을 가진다.</li>
  <li>객체 관계 매핑(ORM) 에서 가장 어려운 부분이 객체 연관관계와 테이블을 매핑하는 일이다.</li>
  <li>연관관계를 이해하기 위한 <strong>핵심 키워드</strong>
    <ul>
      <li>✔︎방향: 방향은 객체관계에만 존재하고, 테이블 관계에서는 항상 양방향이다.</li>
      <li>✔︎다중성: 1:N과 같은 관계를 말한다.</li>
      <li>✔︎연관관계의 주인: 객체를 양방향 연관관계로 만들면 연관관계의 주인을 정해야 한다.</li>
    </ul>
  </li>
</ul>

<h2 id="3-단방향-연관관계">3. 단방향 연관관계</h2>

<ul>
  <li>회원(N): 팀(1)의 관계를 생각해보자.
    <ul>
      <li>객체 연관관계
        <ul>
          <li>member -&gt; team 으로 접근만 가능(단방향)</li>
        </ul>
      </li>
      <li>테이블 연관관계
        <ul>
          <li>회원테이블은 TEAM_ID 외래키 팀테이블과 연관관계를 맺는다.</li>
        </ul>
      </li>
      <li>객체 연관관계와 테이블 연관관계의 가장 큰 차이
        <ul>
          <li>객체간의 연관관계를 양방향으로 만들고 싶으면 반대쪽에도 필드를 추가해서 참조를 보관해야 한다.</li>
          <li>반명에 테이블은 외래키 하나로 양방향을 조인할 수 있다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="4-연관관계-사용">4. 연관관계 사용</h2>

<h3 id="41-저장">4.1. 저장</h3>

<h3 id="42-조회">4.2. 조회</h3>

<ul>
  <li>연관관계가 있는 엔티티를 조회하는 방법
    <ul>
      <li>객체 그래프 탐색</li>
      <li>객체지향 쿼리 사용 JPQL</li>
    </ul>
  </li>
</ul>

<h3 id="43-연관된-엔티티-삭제">4.3. 연관된 엔티티 삭제</h3>

<ul>
  <li>연관된 엔티티를 삭제하려면, 기존에 있던 연관관계를 먼저 제거하고 삭제해야 한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">member1</span><span class="o">.</span><span class="na">setTeam</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span> <span class="c1">// 회원1 연관관계 제거</span>
<span class="n">member2</span><span class="o">.</span><span class="na">setTeam</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span> <span class="c1">// 회원2 연관관계 제거 </span>
<span class="n">em</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">team</span><span class="o">);</span> <span class="c1">// 팀삭제</span>
</code></pre></div></div>

<h2 id="5-양방향-연관관계">5. 양방향 연관관계</h2>

<h3 id="51-양방향-연관관계-매핑">5.1. 양방향 연관관계 매핑</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span> 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
  
  <span class="nd">@Id</span>
  <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"MEMBER_ID"</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
  
  <span class="nd">@ManyToOne</span> 
  <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"TEAM_ID"</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">Team</span> <span class="n">team</span><span class="o">;</span>

  <span class="c1">// 연관관계 설정 </span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTeam</span><span class="o">(</span><span class="nc">Team</span> <span class="n">team</span><span class="o">){</span>
    <span class="k">this</span><span class="o">.</span><span class="na">team</span> <span class="o">=</span> <span class="n">team</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span> 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Team</span> <span class="o">{</span>

  <span class="nd">@Id</span> 
  <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"TEAM_ID"</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
  
  <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span> <span class="o">=</span> <span class="s">"team"</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>mappedBy 속성은 양방향 매핑일 때 사용하는데, 반대쪽 매핑의 필드 이름을 값으로 주면된다.  &gt; <code class="language-plaintext highlighter-rouge">연관관계의 주인</code> 에서 자세한 설명 !!</li>
</ul>

<h2 id="6-연관관계의-주인">6. 연관관계의 주인</h2>

<ul>
  <li>@OneToMany에서 mappedBy 속성이 왜 필요할까?
    <ul>
      <li>객체에서 양방향은 사실 단방향 2개로 존재한. 테이블에서는 외래키 하나로 존재한다.</li>
      <li>엔티티를 양방향 연관관계로 설정하면 객체의 참조는 둘인데 외래키는 하나다. 따라서 둘 사이에 차이가 발생한다. 이런 차이로 인해서 JPA는 두 객체 연관관계 중 하나를 정해서 테이블의 외래키를 관리해야 하는데 이것을 <code class="language-plaintext highlighter-rouge">연관관계의 주인</code> 이라 한다.</li>
    </ul>
  </li>
</ul>

<h3 id="61-양방향-매핑의-규칙-연관관계의-주인">6.1. 양방향 매핑의 규칙: 연관관계의 주인</h3>

<p>연관관계의 주인만이 데이터베이스 연관관계와 매핑되고 외래 키를 관리(등록, 수정,삭제)할 수 있다. 반면에 주인이 아닌 쪽은 읽기만 할 수 있다.</p>

<ul>
  <li>주인은 mappedBy 속성을 사용하지 않는다.</li>
  <li>주인이 아니면mappedBy 속성을 사용해서 속성의 값으로 연관관계의 주인을 지정해야 한다.</li>
</ul>

<h3 id="62-연관관계의-주인은-외래키가-있는곳">6.2. 연관관계의 주인은 외래키가 있는곳</h3>

<p>연관관계의 주인은 테이블에 <code class="language-plaintext highlighter-rouge">외래키가 있는곳</code> 으로 정해야 한다.</p>

<blockquote>
  <p>데이터베이스 테이블의 다대일, 일대다 관계에서 항상 <code class="language-plaintext highlighter-rouge">다</code> 쪽이 외래키를 가진다.</p>
</blockquote>

<h2 id="7-양방향-연관관계-저장">7. 양방향 연관관계 저장</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span>
  <span class="nc">Team</span> <span class="n">team1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Team</span><span class="o">(</span><span class="s">"team1"</span><span class="o">,</span> <span class="s">"팀1"</span><span class="o">);</span>
  <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">team1</span><span class="o">);</span>
  
  <span class="c1">// 회원1저장 </span>
  <span class="nc">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member1"</span><span class="o">,</span> <span class="s">"회원1"</span><span class="o">);</span>
  <span class="n">member1</span><span class="o">.</span><span class="na">setTeam</span><span class="o">(</span><span class="n">team1</span><span class="o">);</span> <span class="c1">// 연관관계 설정 member1 &gt; team1</span>
  <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span>
  
  
  <span class="c1">// 회원2저장 </span>
  <span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member2"</span><span class="o">,</span> <span class="s">"회원2"</span><span class="o">);</span>
  <span class="n">member2</span><span class="o">.</span><span class="na">setTeam</span><span class="o">(</span><span class="n">team1</span><span class="o">);</span> <span class="c1">// 연관관계 설정 member2 &gt; team1</span>
  <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member2</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>양방향 연관관계는 연관관계의 주인이 외래키를 관리한다. 따라서 <strong>주인이 아닌 방향은 값을 설정하지 않아도 데이터베이스에 외래키 값이 정상 입력된다.</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">team1</span><span class="o">.</span><span class="na">getMembers</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span> <span class="c1">//무시(연관관계의 주인이 아님)</span>
<span class="n">team1</span><span class="o">.</span><span class="na">getMembers</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">member2</span><span class="o">);</span> <span class="c1">//무시(연관관계의 주인이 아님)</span>
</code></pre></div></div>

<p>이런 코드가 추가로 있어야 할것 같지만 Team.members는 연관관계의 주인이 아니다. <strong>주인이 아닌 곳에 입력된 값은 외래키에 영향을 주지 않는다.</strong></p>

<h2 id="8-양방향-연관관계의-주의점">8. 양방향 연관관계의 주의점</h2>

<ul>
  <li>가장 많이 하는 실수는 연관관계의 주인에는 값을 입력하지 않고, 주인이 아닌 곳에만 값을 입력하는 것이다. 외래키값이 정상적으로 저장되지 않으면 이것부터 의심해보자.</li>
</ul>

<h3 id="81-순수한-객체까지-고려한-양방향-연관관계">8.1. 순수한 객체까지 고려한 양방향 연관관계</h3>

<ul>
  <li>Q.  정말 연관관계의 주인에만 값을 저장하고, 주인이 아닌 곳에는 값을 저장하지 않아도 될까?
    <ul>
      <li>A. 사실은 <strong>객체 관점에서 양쪽 방향 모두 값을 입력해 주는 것이 가장 안전하다.</strong> 양쪽 방향 모두 값을 입력하지 않으면 JPA를 사용하지 않는 순수한 객체 상태에서 김각한 문제를 발생 할 수 있다.</li>
    </ul>
  </li>
</ul>

<h3 id="82-연관관계-편의-메서드">8.2. 연관관계 편의 메서드</h3>

<ul>
  <li>양방향 연관관계는 결국 양쪽 연관관계를 다 신경써야 한다. member.setTeam(team)과 team.getMembers().add(member) 를 각각 호출하다 보면 실수 할 수 있다.</li>
  <li>양방향 관계에서 두 코드는 하나인 것처럼 사용하는 것이 안전하다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">Team</span> <span class="n">team</span><span class="o">;</span>
  
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTeam</span><span class="o">(</span><span class="nc">Team</span> <span class="n">team</span><span class="o">){</span>
    <span class="k">this</span><span class="o">.</span><span class="na">team</span> <span class="o">=</span> <span class="n">team</span><span class="o">;</span>
    <span class="n">team</span><span class="o">.</span><span class="na">getMembers</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="83-연관관계-편의-메서드-작성시-주의사항">8.3. 연관관계 편의 메서드 작성시 주의사항</h3>

<ul>
  <li>연관관계를 변경할 때는 기존 팀이 있으면 기존 팀과 회원의 연관관계를 삭제하는 코드를 추가해야 한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">Team</span> <span class="n">team</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTeam</span><span class="o">(</span><span class="nc">Team</span> <span class="n">team</span><span class="o">){</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">team</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
      <span class="k">this</span><span class="o">.</span><span class="na">team</span><span class="o">.</span><span class="na">getMembers</span><span class="o">().</span><span class="na">remove</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="k">this</span><span class="o">.</span><span class="na">team</span> <span class="o">=</span> <span class="n">team</span><span class="o">;</span>
    <span class="n">team</span><span class="o">.</span><span class="na">getMembers</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="9-정리">9. 정리</h2>

<ul>
  <li>단방향 매핑에 비해, 양방향은 복잡하다. 연관관계의 주인(외래키가 있는곳)도 정해야 하고, 두개의 단방향 연관관계를 양방향으로 만들기 위해 로직도 잘 관리해야 한다.</li>
  <li>단방향 매핑만으로 테이블과 객체의 연관관계 매핑은 이미 완료되었다.</li>
  <li>단방향을 양방향으로 만들려면 반대방향으로 객체 그래프 탐색 기능이 추가된다.</li>
  <li>양방향 연관관계를 매핑하려면 객체에서 양쪽 방향을 모두 관리해야 한다.</li>
</ul>
:ET