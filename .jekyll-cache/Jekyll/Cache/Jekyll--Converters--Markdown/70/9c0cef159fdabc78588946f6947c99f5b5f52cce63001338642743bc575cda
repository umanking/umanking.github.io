I"+<blockquote>
  <p>@SpringBootApplication 안에 들어있는 @ComponentScan, @EnableAutoConfiguration 을 알아보자.</p>
</blockquote>

<p>Spring Initializer를 통해서 만든 스프링 부트 프로젝트 Root Application 클래스 레벨에 <code class="language-plaintext highlighter-rouge">@SpringBootApplication</code> 이 붙어있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>@SpringBootApplication은 크게 3가지의 어노테이션으로 구성되어 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Target</span><span class="o">(</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="nd">@Documented</span>
<span class="nd">@Inherited</span>
<span class="nd">@SpringBootConfiguration</span>
<span class="nd">@EnableAutoConfiguration</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">excludeFilters</span> <span class="o">=</span> <span class="o">{</span>
        <span class="nd">@Filter</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FilterType</span><span class="o">.</span><span class="na">CUSTOM</span><span class="o">,</span> <span class="n">classes</span> <span class="o">=</span> <span class="nc">TypeExcludeFilter</span><span class="o">.</span><span class="na">class</span><span class="o">),</span>
        <span class="nd">@Filter</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FilterType</span><span class="o">.</span><span class="na">CUSTOM</span><span class="o">,</span>
                <span class="n">classes</span> <span class="o">=</span> <span class="nc">AutoConfigurationExcludeFilter</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">})</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">SpringBootApplication</span> <span class="o">{</span>
  <span class="o">...</span> <span class="n">생략</span>
</code></pre></div></div>

<ul>
  <li>@SpringBootConfiguration</li>
  <li>@ComponentScan</li>
  <li>@EnableAutoConfiguration</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">@SpringBootConfiguration</code>은 <code class="language-plaintext highlighter-rouge">@Configuration</code> 이다.</p>

<p>@ComponetScan은 컴포넌트 빈들을 스캐닝해서 빈으로 등록해주는 역할을 한다. 컴포넌트에 해당하는 빈들은 클래스 레벨에 <code class="language-plaintext highlighter-rouge">@RestController</code>, <code class="language-plaintext highlighter-rouge">@Service</code>, <code class="language-plaintext highlighter-rouge">@Repository</code>, <code class="language-plaintext highlighter-rouge">@Configuration</code>, <code class="language-plaintext highlighter-rouge">@Component</code> 와 같이 붙여준다.</p>

<p>마지막으로 제일 중요한 <code class="language-plaintext highlighter-rouge">@EnableAutoConfiguration</code> 은 <code class="language-plaintext highlighter-rouge">spring-boot-autoconfigure</code>라는 라이브러리에서 <code class="language-plaintext highlighter-rouge">spring.factories</code> 라는 메타정보에 기록된 AutoConfiguration 정보를 가지고 빈으로 등록한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="nc">Auto</span> <span class="nc">Configure</span>
<span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">.</span><span class="na">autoconfigure</span><span class="o">.</span><span class="na">EnableAutoConfiguration</span><span class="o">=</span><span class="err">\</span>
<span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">.</span><span class="na">autoconfigure</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">oauth2</span><span class="o">.</span><span class="na">resource</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">OAuth2ResourceServerAutoConfiguration</span><span class="o">,</span><span class="err">\</span>
<span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">.</span><span class="na">autoconfigure</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">oauth2</span><span class="o">.</span><span class="na">resource</span><span class="o">.</span><span class="na">reactive</span><span class="o">.</span><span class="na">ReactiveOAuth2ResourceServerAutoConfiguration</span><span class="o">,</span><span class="err">\</span>
<span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">.</span><span class="na">autoconfigure</span><span class="o">.</span><span class="na">task</span><span class="o">.</span><span class="na">TaskExecutionAutoConfiguration</span><span class="o">,</span><span class="err">\</span>
<span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">.</span><span class="na">autoconfigure</span><span class="o">.</span><span class="na">webservices</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">WebServiceTemplateAutoConfiguration</span>
<span class="c1">// ...</span>
</code></pre></div></div>

<p>결국 스프링부트에서 빈을 등록하는 방법은 크게 2가지로 나뉜다.</p>

<ol>
  <li>베이스 패키지 기반의 ComponentScan을 통해서 내가 정의한 컴포넌트(Repository, Controller, Service, Configuration, Component) 를 등록한다.</li>
  <li>@EnableAutoConfiguration을 통해서 spring.factories에 정의되어 있는 Configuration빈들을 등록한다.</li>
</ol>

<h4 id="조금더-살펴보자">조금더 살펴보자</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnWebApplication</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">Type</span><span class="o">.</span><span class="na">SERVLET</span><span class="o">)</span>
<span class="nd">@ConditionalOnClass</span><span class="o">({</span> <span class="nc">Servlet</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">DispatcherServlet</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">WebMvcConfigurer</span><span class="o">.</span><span class="na">class</span> <span class="o">})</span>
<span class="nd">@ConditionalOnMissingBean</span><span class="o">(</span><span class="nc">WebMvcConfigurationSupport</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@AutoConfigureOrder</span><span class="o">(</span><span class="nc">Ordered</span><span class="o">.</span><span class="na">HIGHEST_PRECEDENCE</span> <span class="o">+</span> <span class="mi">10</span><span class="o">)</span>
<span class="nd">@AutoConfigureAfter</span><span class="o">({</span> <span class="nc">DispatcherServletAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
        <span class="nc">TaskExecutionAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">ValidationAutoConfiguration</span><span class="o">.</span><span class="na">class</span> <span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebMvcAutoConfiguration</span> <span class="o">{</span>

  <span class="nd">@Bean</span>
    <span class="nd">@ConditionalOnMissingBean</span><span class="o">(</span><span class="nc">HiddenHttpMethodFilter</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">prefix</span> <span class="o">=</span> <span class="s">"spring.mvc.hiddenmethod.filter"</span><span class="o">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"enabled"</span><span class="o">,</span>
            <span class="n">matchIfMissing</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">OrderedHiddenHttpMethodFilter</span> <span class="nf">hiddenHttpMethodFilter</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">OrderedHiddenHttpMethodFilter</span><span class="o">();</span>
    <span class="o">}</span>

  <span class="o">...</span><span class="na">생략</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위의 AutoConfiguration에서 WebMvcAutoConfiguration 클래스를 살펴보면 다음과 같다.</p>

<p>클래스 레벨, 메소드 레벨에 보이는게 @ConditionalOn xxx 이런 어노테이션이 많이 보인다. on뒤에 어떤 조건인 경우에서 Conditional하게 사용할 수 있다. 예를 들면 <code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</code> HiddenHttpMethodFilter가 빈으로 등록되어 있지 않으면, <code class="language-plaintext highlighter-rouge">return new OrderedHiddenHttpMethodFilter();</code> 새로운 필터를 만든다.</p>
:ET